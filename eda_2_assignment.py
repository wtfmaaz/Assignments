# -*- coding: utf-8 -*-
"""EDA 2 Assignment

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1KTrfNxV0cP1R0MJ1hwOjWHPCTyenGtWc

#	1. Data Exploration and Preprocessing:
"""

import pandas as pd

df = pd.read_csv("/content/adult_with_headers.csv")

df

df.head()

df.info()

df.describe(include='all')

df.isnull().sum()

df['workclass'].fillna(df['workclass'].mode()[0], inplace=True)
df['occupation'].fillna(df['occupation'].mode()[0], inplace=True)

df.dropna(inplace=True)

from sklearn.preprocessing import StandardScaler, MinMaxScaler

numerical_features = df.select_dtypes(include=['int64', 'float64']).columns

standard_scaler = StandardScaler()
df[numerical_features] = standard_scaler.fit_transform(df[numerical_features])

minmax_scaler = MinMaxScaler()
df[numerical_features] = minmax_scaler.fit_transform(df[numerical_features])

"""# 2. Encoding Techniques:"""

df = pd.get_dummies(df, columns=['workclass', 'education', 'marital_status', 'occupation', 'relationship', 'race', 'sex', 'native_country'])

from sklearn.preprocessing import LabelEncoder
label_encoder = LabelEncoder()
df['age'] = label_encoder.fit_transform(df['age'])

"""# 3. Feature Engineering:"""

bins = [0, 30, 50, 100]
labels = ['Young', 'Middle-aged', 'Senior']
df['age_group'] = pd.cut(df['age'], bins=bins, labels=labels)

df['capital_gain_loss_ratio'] = df['capital_gain'] / (df['capital_loss'] + 1)

import numpy as np

df['log_capital_gain'] = np.log1p(df['capital_gain'])

from sklearn.preprocessing import StandardScaler, OneHotEncoder
from sklearn.compose import ColumnTransformer
from sklearn.pipeline import Pipeline

X = df.drop('age', axis=1)
y = df['age']

numerical_columns = df.select_dtypes(include=['int64', 'float64']).columns

numerical_features = numerical_columns
categorical_features = ['workclass', 'education', 'marital_status', 'occupation', 'relationship', 'race', 'sex', 'native_country']

preprocessor = ColumnTransformer(
    transformers=[
        ('age', StandardScaler(), numerical_features),
        ('hours_per_week', OneHotEncoder(), categorical_features)
    ])

"""# 4. Feature Selection:"""

from sklearn.ensemble import IsolationForest

iso_forest = IsolationForest(contamination=0.01)
outliers = iso_forest.fit_predict(df[numerical_features])
df = df[outliers != -1]

import ppscore as pps

X = df.drop(columns=['income'])
y = df['income']

pps_df = pps.matrix(df, 'list')

print(pps_df)